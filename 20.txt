slip 1 5 6 11 14

#include <stdio.h>
int main() {
 int n = 3, referenceString[] = {3, 4, 5, 6, 3, 4, 7, 3, 4, 5, 6, 7, 2, 4, 6};
 int memory[n], faults = 0, i = 0;
 for (int j = 0; j < n; j++) memory[j] = -1;
 printf("Page Scheduling using FIFO:\n");
 for (int r = 0; r < 15; r++) {
 int page = referenceString[r], found = 0;
 for (int j = 0; j < n; j++) {
 if (memory[j] == page) {
 found = 1;
 break;}}
 if (!found) {
 faults++;
 if (memory[i % n] != -1) {
 printf("Page %d replaced by Page %d\n", memory[i % n], page);}
 memory[i % n] = page;
 i++;
 printf("Page %d -> Page Fault\nMemory: ", page);
 for (int j = 0; j < n; j++) {
 printf("%d ", memory[j]);}
 printf("\n");}}
 printf("Total Page Faults: %d\n", faults);
 return 0;}

===============================================================================

slip 2  18 13
#include <stdio.h>
#include <stdlib.h>

void swap(int *xp, int *yp) {
    int temp = *xp;
    *xp = *yp;
    *yp = temp;
}

void sort(int arrival_time[], int cpu_burst[], int io_waiting_time[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arrival_time[j] > arrival_time[j + 1]) {
                swap(&arrival_time[j], &arrival_time[j + 1]);
                swap(&cpu_burst[j], &cpu_burst[j + 1]);
                swap(&io_waiting_time[j], &io_waiting_time[j + 1]);
            }
        }
    }
}

void sjf(int arrival_time[], int cpu_burst[], int io_waiting_time[], int n) {
    sort(arrival_time, cpu_burst, io_waiting_time, n);

    int current_time = 0;
    printf("Gantt Chart:\n");

    for (int i = 0; i < n; i++) {
        printf("| P%d ", i + 1);

        int waiting_time = current_time;
        int turnaround_time = waiting_time + cpu_burst[i];

        current_time += cpu_burst[i] + io_waiting_time[i];

        printf("|");
    }
    
    printf("\n\n");

    printf("Process\tTurnaround Time\tWaiting Time\n");

    for (int i = 0; i < n; i++) {
        int waiting_time = arrival_time[i];
        int turnaround_time = waiting_time + cpu_burst[i] + io_waiting_time[i];
        
        printf("P%d\t%d\t\t%d\n", i + 1, turnaround_time, waiting_time);
    }
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    int arrival_time[n];
    int cpu_burst[n];
    int io_waiting_time[n];

    for (int i = 0; i < n; i++) {
        printf("Enter arrival time for P%d: ", i + 1);
        scanf("%d", &arrival_time[i]);
        printf("Enter CPU burst for P%d: ", i + 1);
        scanf("%d", &cpu_burst[i]);
        io_waiting_time[i] = 2; // Fixed I/O waiting time
    }

    sjf(arrival_time, cpu_burst, io_waiting_time, n);

    return 0;
}

================================================================================

slip 3 7 10 12 17 20


#include <stdio.h>
#include <stdlib.h>

void swap(int *xp, int *yp) {
    int temp = *xp;
    *xp = *yp;
    *yp = temp;
}

void sort(int arrival_time[], int cpu_burst[], int io_waiting_time[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arrival_time[j] > arrival_time[j + 1]) {
                swap(&arrival_time[j], &arrival_time[j + 1]);
                swap(&cpu_burst[j], &cpu_burst[j + 1]);
                swap(&io_waiting_time[j], &io_waiting_time[j + 1]);
            }
        }
    }
}

void fcfs(int arrival_time[], int cpu_burst[], int io_waiting_time[], int n) {
    sort(arrival_time, cpu_burst, io_waiting_time, n);

    int current_time = 0;
    printf("Gantt Chart:\n");

    for (int i = 0; i < n; i++) {
        printf("| P%d ", i + 1);

        int waiting_time = current_time;
        int turnaround_time = waiting_time + cpu_burst[i];

        current_time += cpu_burst[i] + io_waiting_time[i];

        printf("|");
    }
    
    printf("\n\n");

    float total_turnaround_time = 0;
    float total_waiting_time = 0;

    printf("Process\tTurnaround Time\tWaiting Time\n");

    for (int i = 0; i < n; i++) {
        int waiting_time = arrival_time[i];
        int turnaround_time = waiting_time + cpu_burst[i] + io_waiting_time[i];
        
        printf("P%d\t%d\t\t%d\n", i + 1, turnaround_time, waiting_time);

        total_turnaround_time += turnaround_time;
        total_waiting_time += waiting_time;
    }

    printf("\nAverage Turnaround Time: %.2f\n", total_turnaround_time / n);
    printf("Average Waiting Time: %.2f\n", total_waiting_time / n);
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    int arrival_time[n];
    int cpu_burst[n];
    int io_waiting_time[n];

    for (int i = 0; i < n; i++) {
        printf("Enter arrival time for P%d: ", i + 1);
        scanf("%d", &arrival_time[i]);
        printf("Enter CPU burst for P%d: ", i + 1);
        scanf("%d", &cpu_burst[i]);
        io_waiting_time[i] = 2; // Fixed I/O waiting time
    }

    fcfs(arrival_time, cpu_burst, io_waiting_time, n);

    return 0;
}

==========================================================================================

slip 4 19

#include <stdio.h>
#include <stdlib.h>

void swap(int *xp, int *yp) {
    int temp = *xp;
    *xp = *yp;
    *yp = temp;
}

void sort_by_priority(int process_id[], int arrival_time[], int cpu_burst[], int priority[], int io_waiting_time[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (priority[j] > priority[j + 1]) {
                swap(&process_id[j], &process_id[j + 1]);
                swap(&arrival_time[j], &arrival_time[j + 1]);
                swap(&cpu_burst[j], &cpu_burst[j + 1]);
                swap(&priority[j], &priority[j + 1]);
                swap(&io_waiting_time[j], &io_waiting_time[j + 1]);
            }
        }
    }
}

void priority_scheduling(int process_id[], int arrival_time[], int cpu_burst[], int priority[], int io_waiting_time[], int n) {
    sort_by_priority(process_id, arrival_time, cpu_burst, priority, io_waiting_time, n);

    int current_time = 0;
    printf("Gantt Chart:\n");

    for (int i = 0; i < n; i++) {
        printf("| P%d ", process_id[i]);

        int waiting_time = current_time;
        int turnaround_time = waiting_time + cpu_burst[i];

        current_time += cpu_burst[i] + io_waiting_time[i];

        printf("|");
    }

    printf("\n\n");

    float total_turnaround_time = 0;
    float total_waiting_time = 0;

    printf("Process\tTurnaround Time\tWaiting Time\n");

    for (int i = 0; i < n; i++) {
        int waiting_time = arrival_time[i];
        int turnaround_time = waiting_time + cpu_burst[i] + io_waiting_time[i];

        printf("P%d\t%d\t\t%d\n", process_id[i], turnaround_time, waiting_time);

        total_turnaround_time += turnaround_time;
        total_waiting_time += waiting_time;
    }

    printf("\nAverage Turnaround Time: %.2f\n", total_turnaround_time / n);
    printf("Average Waiting Time: %.2f\n", total_waiting_time / n);
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    int process_id[n];
    int arrival_time[n];
    int cpu_burst[n];
    int priority[n];
    int io_waiting_time[n];

    for (int i = 0; i < n; i++) {
        process_id[i] = i + 1;
        printf("Enter arrival time for P%d: ", i + 1);
        scanf("%d", &arrival_time[i]);
        printf("Enter CPU burst for P%d: ", i + 1);
        scanf("%d", &cpu_burst[i]);
        printf("Enter priority for P%d: ", i + 1);
        scanf("%d", &priority[i]);
        io_waiting_time[i] = 2; // Fixed I/O waiting time
    }

    priority_scheduling(process_id, arrival_time, cpu_burst, priority, io_waiting_time, n);

    return 0;
}


=============================================================================================

slip 8 16

#include<stdio.h>
int n=16,nf;//n is length of reference string 
int in[20]={12,15,12,18,6,8,11,12,19,12,6,8,12,15,19,8};//reference string 
int p[50];
int hit=0;
int i,j,k;
int pgfaultcnt=0;
 
void getData()
{
    printf("\nEnter no of frames:");
    scanf("%d",&nf);
}
 
void initialize()
{
    pgfaultcnt=0;
    for(i=0; i<nf; i++)
        p[i]=9999;
}
 
int isHit(int data)
{
    hit=0;
    for(j=0; j<nf; j++)
    {
        if(p[j]==data)
        {
            hit=1;
            break;
        }
     }
     return hit;
}
 
int getHitIndex(int data)
{
    int hitind;
    for(k=0; k<nf; k++)
    {
        if(p[k]==data)
        {
            hitind=k;
            break;
        }
    }
    return hitind;
}
 
void dispPages()
{
    for (k=0; k<nf; k++)
    {
        if(p[k]!=9999)
            printf(" %d",p[k]);
    }
 }
 
void dispPgFaultCnt()
{
    printf("\nTotal no of page faults:%d",pgfaultcnt);
}
 
 
 void optimal()
{
    initialize();
    int near[50];
    for(i=0; i<n; i++)
    {
         printf("\nFor %d :",in[i]);
 
        if(isHit(in[i])==0)
        {
            for(j=0; j<nf; j++)
            {
                int pg=p[j];
                int found=0;
                for(k=i; k<n; k++)
                {
                    if(pg==in[k])
                    {
                        near[j]=k;
                        found=1;
                        break;
                    }
                    else
                        found=0;
                }
                if(!found)
                    near[j]=9999;
            }
            int max=-9999;
            int repindex;
            for(j=0; j<nf; j++)
            {
                if(near[j]>max)
                {
                    max=near[j];
                    repindex=j;
                }
            }
            p[repindex]=in[i];
            pgfaultcnt++;
 
            dispPages();
        }
        else
            printf("No page fault");
    }
    dispPgFaultCnt();
}
 
 
int main()
{
            getData();
            optimal();
} 

=====================================================================================

slip 9

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MAX_PROCESSES 10

void roundRobinScheduling(int arrival_time[], int burst_time[], int n, int time_quantum) {
    int remaining_burst[MAX_PROCESSES];
    int turnaround_time[MAX_PROCESSES];
    int waiting_time[MAX_PROCESSES];

    srand(time(NULL));

    for (int i = 0; i < n; i++) {
        remaining_burst[i] = burst_time[i];
        turnaround_time[i] = 0;
        waiting_time[i] = 0;
    }

    int currentTime = 0;
    int remainingProcesses = n;

    while (remainingProcesses > 0) {
        for (int i = 0; i < n; i++) {
            if (remaining_burst[i] > 0) {
                int executeTime = (remaining_burst[i] < time_quantum) ? remaining_burst[i] : time_quantum;

                remaining_burst[i] -= executeTime;
                currentTime += executeTime;

                // Print Gantt Chart
                printf("| P%d ", i + 1);

                if (remaining_burst[i] == 0) {
                    remainingProcesses--;

                    // Generate the next CPU burst randomly (between 1 and 10)
                    int nextBurst = rand() % 10 + 1;
                    burst_time[i] = nextBurst;
                    
                    turnaround_time[i] = currentTime - arrival_time[i];
                    waiting_time[i] = turnaround_time[i] - burst_time[i];
                }
            }
        }
    }

    printf("|\n");

    // Print Turnaround Time and Waiting Time
    printf("\n\nProcess\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\n", i + 1, turnaround_time[i], waiting_time[i]);
    }

    // Calculate and print average times
    float avg_turnaround_time = 0, avg_waiting_time = 0;
    for (int i = 0; i < n; i++) {
        avg_turnaround_time += turnaround_time[i];
        avg_waiting_time += waiting_time[i];
    }

    avg_turnaround_time /= n;
    avg_waiting_time /= n;

    printf("\nAverage Turnaround Time: %.2f\n", avg_turnaround_time);
    printf("Average Waiting Time: %.2f\n", avg_waiting_time);
}

int main() {
    int n, time_quantum;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    if (n <= 0 || n > MAX_PROCESSES) {
        printf("Invalid number of processes. Exiting...\n");
        return 1;
    }

    int arrival_time[MAX_PROCESSES];
    int burst_time[MAX_PROCESSES];

    // Input arrival time and burst time for each process
    for (int i = 0; i < n; i++) {
        printf("Enter arrival time for P%d: ", i + 1);
        scanf("%d", &arrival_time[i]);

        printf("Enter burst time for P%d: ", i + 1);
        scanf("%d", &burst_time[i]);
    }

    // Input time quantum
    printf("Enter the time quantum: ");
    scanf("%d", &time_quantum);

    // Print Gantt Chart header
    printf("\nGantt Chart:\n|");

    // Run Round Robin Scheduling
    roundRobinScheduling(arrival_time, burst_time, n, time_quantum);

    return 0;
}


=========================================================================================

slip 15

#include <stdio.h>
#include <stdlib.h>
int findLRU(int frames[], int n, int page, int current) {
 int index = -1;
 int farthest = current;
 for (int i = 0; i < n; i++) {
 int j;
 for (j = current - 1; j >= 0; j--) {
 if (frames[i] == page) {
 break;}
 if (frames[i] == -1 || frames[i] == frames[j]) {
 if (j < farthest) {
 farthest = j;
 index = i;}
 break;}}}
 return index;}
int main() {
 int n = 3; 
 int referenceString[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2};
 int referenceStringLength = sizeof(referenceString) / sizeof(referenceString[0]);
 int frames[n];
 int pageFaults = 0;
 for (int i = 0; i < n; i++) {
 frames[i] = -1;}
 printf("Page Scheduling using LRU:\n");
 for (int i = 0; i < referenceStringLength; i++) {
 int page = referenceString[i];
 int found = 0;
 for (int j = 0; j < n; j++) {
 if (frames[j] == page) {
 found = 1;
 break;}}
 if (!found) {
 int replaceIndex = findLRU(frames, n, page, i);
 frames[replaceIndex] = page;
 pageFaults++;
 printf("Page %d -> Page Fault\n", page);}}
 printf("Total Page Faults: %d\n", pageFaults);
 return 0;}
